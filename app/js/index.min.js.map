{"version":3,"sources":["index.js"],"names":["form","document","getElementById","name","pass","checkInputs","nameValue","value","trim","passValue","setErrorFor","setSuccessFor","input","message","formControl","parentElement","small","querySelector","innerText","className","addEventListener","e","preventDefault","formR","email","user","password","checkInputsR","emailValue","userValue","passwordValue","setErrorForR","setSuccessForR","isEmail","test","toLowerCase"],"mappings":"AAAA,MAAAA,KAAAC,SAAAC,eAAA,cAEAC,KAAAF,SAAAC,eAAA,QACAE,KAAAH,SAAAC,eAAA,QAOA,SAAAG,cACA,IAAAC,EAAAH,KAAAI,MAAAC,OACAC,EAAAL,KAAAG,MAAAC,OAEA,KAAAF,EACAI,YAAAP,KAAA,4BAEAQ,cAAAR,MAGA,KAAAM,EACAC,YAAAN,KAAA,4BAEAO,cAAAP,MAIA,SAAAM,YAAAE,EAAAC,GACA,MAAAC,EAAAF,EAAAG,cACAC,EAAAF,EAAAG,cAAA,UACAD,EAAAE,UAAAL,EAEAC,EAAAK,UAAA,2BAGA,SAAAR,cAAAC,GACA,MAAAE,EAAAF,EAAAG,cAEAD,EAAAK,UAAA,6BAjCAnB,KAAAoB,iBAAA,SAAA,IACAC,EAAAC,iBACAjB,gBAkCA,MAAAkB,MAAAtB,SAAAC,eAAA,eAEAsB,MAAAvB,SAAAC,eAAA,SACAuB,KAAAxB,SAAAC,eAAA,QACAwB,SAAAzB,SAAAC,eAAA,YAOA,SAAAyB,eACA,IAAAC,EAAAJ,MAAAjB,MAAAC,OACAqB,EAAAJ,KAAAlB,MAAAC,OACAsB,EAAAJ,SAAAnB,MAAAC,OAEA,KAAAoB,EACAG,aAAAP,MAAA,yBAEAQ,eAAAR,OAGA,KAAAK,EACAE,aAAAN,KAAA,6BAEAO,eAAAP,MAEA,KAAAK,EACAC,aAAAL,SAAA,4BAEAM,eAAAN,UAIA,SAAAK,aAAAnB,EAAAC,GACA,MAAAC,EAAAF,EAAAG,cACAC,EAAAF,EAAAG,cAAA,UACAD,EAAAE,UAAAL,EAEAC,EAAAK,UAAA,4BAGA,SAAAa,eAAApB,GACA,MAAAE,EAAAF,EAAAG,cAEAD,EAAAK,UAAA,8BAGA,SAAAc,QAAAT,GACA,MAAA,0JAAAU,KACAV,EAAAW,eA5CAZ,MAAAH,iBAAA,SAAA,IACAC,EAAAC,iBACAK","file":"index.min.js","sourcesContent":["const form = document.getElementById('form__left');\n\nconst name = document.getElementById('name');\nconst pass = document.getElementById('pass');\n\nform.addEventListener('submit', (e) => {\n  e.preventDefault();\n  checkInputs();\n});\n\nfunction checkInputs() {\n  const nameValue = name.value.trim();\n  const passValue = pass.value.trim();\n\n  if (nameValue === '') {\n    setErrorFor(name, 'Username cannot be blank');\n  } else {\n    setSuccessFor(name);\n  }\n\n  if (passValue === '') {\n    setErrorFor(pass, 'Password cannot be blank');\n  } else {\n    setSuccessFor(pass);\n  }\n}\n\nfunction setErrorFor(input, message) {\n  const formControl = input.parentElement;\n  const small = formControl.querySelector('.small');\n  small.innerText = message;\n\n  formControl.className = 'form__control-left error';\n}\n\nfunction setSuccessFor(input) {\n  const formControl = input.parentElement;\n\n  formControl.className = 'form__control-left success';\n}\n\nconst formR = document.getElementById('form__right');\n\nconst email = document.getElementById('email');\nconst user = document.getElementById('user');\nconst password = document.getElementById('password');\n\nformR.addEventListener('submit', (e) => {\n  e.preventDefault();\n  checkInputsR();\n});\n\nfunction checkInputsR() {\n  const emailValue = email.value.trim();\n  const userValue = user.value.trim();\n  const passwordValue = password.value.trim();\n\n  if (emailValue === '') {\n    setErrorForR(email, 'Email cannot be blank');\n  } else {\n    setSuccessForR(email);\n  }\n\n  if (userValue === '') {\n    setErrorForR(user, 'User Name cannot be blank');\n  } else {\n    setSuccessForR(user);\n  }\n  if (passwordValue === '') {\n    setErrorForR(password, 'Password cannot be blank');\n  } else {\n    setSuccessForR(password);\n  }\n}\n\nfunction setErrorForR(input, message) {\n  const formControl = input.parentElement;\n  const small = formControl.querySelector('.small');\n  small.innerText = message;\n\n  formControl.className = 'form__control-right error';\n}\n\nfunction setSuccessForR(input) {\n  const formControl = input.parentElement;\n\n  formControl.className = 'form__control-right success';\n}\n\nfunction isEmail(email) {\n  return /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\n    email.toLowerCase(),\n  );\n}\n"]}